---
- hosts: servers
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install prerequisites
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [ 'aptitude' ]

  #Install
    - name: Install LAMP
      apt: name={{ item }} update_cache=yes state=latest
      loop: [ 'apache2', 'mysql-server', 'python3-pymysql', 'php', 'php-mysql', 'libapache2-mod-php', 'unzip' ]

    - name: Create document root
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        owner: "{{ app_user }}"
        mode: '0755'

# MySQL
    - name: start and enable mysql service
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Sets the root password
      become: true
      no_log: true
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        name: root
        password: "{{ mysql_root_password }}"
        check_implicit_admin: true
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Removes all anonymous user accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Removes the MySQL test database
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"

#Memcached
    - name: Install memcached
      apt: name={{ item }} update_cache=yes state=latest force_apt_get=yes
      loop: [ 'aptitude', 'libmemcached-tools', 'memcached', 'libapache2-mod-php', 'php-memcached', 'php-cli'  ]

    - name: start and enable memcached service
      service:
        name: memcached
        state: started
        enabled: yes

    - name: Download and unarchive zip lamp-app
      ansible.builtin.unarchive:
        src: "{{ download_app }}"
        dest: /var/www/
        remote_src: yes

#Apache

    - name: Set up Apache virtualhost
      template:
        src: "templates/apache.conf.j2"
        dest: "/etc/apache2/sites-available/{{ http_conf }}"
      notify: Reload Apache

    - name: Set up config.php
      ansible.builtin.template:
        src: "templates/config.php.j2"
        dest: "/var/www/{{ http_host }}/config.php"

    - name: Enable new site
      shell: /usr/sbin/a2ensite {{ http_conf }}
      notify: Reload Apache

    - name: Disable default Apache site
      shell: /usr/sbin/a2dissite 000-default.conf
      when: disable_default
      notify: Reload Apache

    - name: Change directory owner
      become: true
      ansible.builtin.file:
        state: directory
        path: /var/www/{{ http_host }}/uploads
        owner: www-data
        group: www-data

  # PHP Info Page
    - name: Sets Up PHP Info Page
      template:
        src: "templates/info.php.j2"
        dest: "/var/www/{{ http_host }}/info.php"

  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted
